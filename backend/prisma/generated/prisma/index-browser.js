
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  role: 'role',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  gender: 'gender',
  dob: 'dob',
  education: 'education',
  country: 'country',
  state: 'state',
  city: 'city',
  zipCode: 'zipCode',
  regionNumber: 'regionNumber',
  phoneNumber: 'phoneNumber',
  avatar: 'avatar',
  isVerify: 'isVerify',
  verificationSent: 'verificationSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  role: 'role',
  password: 'password',
  about: 'about',
  country: 'country',
  state: 'state',
  city: 'city',
  zipCode: 'zipCode',
  regionNumber: 'regionNumber',
  phoneNumber: 'phoneNumber',
  address: 'address',
  website: 'website',
  logo: 'logo',
  isVerify: 'isVerify',
  industryId: 'industryId',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IndustryScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  city: 'city',
  category: 'category',
  tags: 'tags',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  deadline: 'deadline',
  companyId: 'companyId',
  isPublished: 'isPublished',
  isTestActive: 'isTestActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobdescScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DeveloperScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  status: 'status',
  cvUrl: 'cvUrl',
  expectedSalary: 'expectedSalary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  rating: 'rating',
  isCurrentEmployee: 'isCurrentEmployee',
  employmentStatus: 'employmentStatus',
  jobTitle: 'jobTitle',
  headline: 'headline',
  pros: 'pros',
  cons: 'cons',
  advice: 'advice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  title: 'title',
  description: 'description',
  questions: 'questions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  correctAnswers: 'correctAnswers',
  totalQuestions: 'totalQuestions',
  scorePercentage: 'scorePercentage',
  completedAt: 'completedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  date: 'date',
  time: 'time',
  location: 'location'
};

exports.Prisma.UserResumeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  summary: 'summary'
};

exports.Prisma.WorkExperienceScalarFieldEnum = {
  id: 'id',
  userResumeId: 'userResumeId',
  company: 'company',
  jobdescId: 'jobdescId',
  description: 'description',
  employmentType: 'employmentType',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  userResumeId: 'userResumeId',
  schoolName: 'schoolName',
  degree: 'degree',
  fieldOfStudy: 'fieldOfStudy',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.LeadershipScalarFieldEnum = {
  id: 'id',
  userResumeId: 'userResumeId',
  organization: 'organization',
  role: 'role',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description'
};

exports.Prisma.AdditionalScalarFieldEnum = {
  id: 'id',
  userResumeId: 'userResumeId',
  category: 'category',
  items: 'items',
  description: 'description'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  price: 'price',
  features: 'features',
  userId: 'userId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  status: 'status',
  invoiceUrl: 'invoiceUrl',
  createdAt: 'createdAt',
  expiredAt: 'expiredAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  transactionId: 'transactionId'
};

exports.Prisma.SkillAssessmentTemplateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  questions: 'questions',
  passingScore: 'passingScore',
  totalPoints: 'totalPoints',
  timeLimit: 'timeLimit',
  isActive: 'isActive',
  badgeImage: 'badgeImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillAssessmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  templateId: 'templateId',
  score: 'score',
  totalPoints: 'totalPoints',
  isPassed: 'isPassed',
  timeSpent: 'timeSpent',
  answers: 'answers',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssessmentSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  templateId: 'templateId',
  sessionToken: 'sessionToken',
  timeRemaining: 'timeRemaining',
  currentQuestionIndex: 'currentQuestionIndex',
  answers: 'answers',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Gender = exports.$Enums.Gender = {
  PreferNotToSay: 'PreferNotToSay',
  Male: 'Male',
  Female: 'Female'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  PENDING: 'PENDING',
  VIEWED: 'VIEWED',
  SHORTLISTED: 'SHORTLISTED',
  INTERVIEW: 'INTERVIEW',
  OFFERED: 'OFFERED',
  REJECTED: 'REJECTED'
};

exports.EmploymentType = exports.$Enums.EmploymentType = {
  FULLTIME: 'FULLTIME',
  PARTTIME: 'PARTTIME',
  CONTRACT: 'CONTRACT',
  FREELANCE: 'FREELANCE',
  SELFEMPLOYED: 'SELFEMPLOYED',
  INTERN: 'INTERN'
};

exports.AdditionalCategory = exports.$Enums.AdditionalCategory = {
  TECHNICAL: 'TECHNICAL',
  LANGUAGE: 'LANGUAGE',
  INTERPERSONAL: 'INTERPERSONAL'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED'
};

exports.SubscriberStatus = exports.$Enums.SubscriberStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Company: 'Company',
  Industry: 'Industry',
  Job: 'Job',
  Jobdesc: 'Jobdesc',
  Developer: 'Developer',
  Application: 'Application',
  Review: 'Review',
  Test: 'Test',
  UserTest: 'UserTest',
  Interview: 'Interview',
  UserResume: 'UserResume',
  WorkExperience: 'WorkExperience',
  Education: 'Education',
  Leadership: 'Leadership',
  Additional: 'Additional',
  Subscription: 'Subscription',
  Transaction: 'Transaction',
  Subscriber: 'Subscriber',
  SkillAssessmentTemplate: 'SkillAssessmentTemplate',
  SkillAssessment: 'SkillAssessment',
  AssessmentSession: 'AssessmentSession'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
